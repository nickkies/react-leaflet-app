{"version":3,"sources":["components/MyMap.js","App.js","reportWebVitals.js","index.js"],"names":["MyMap","state","color","countryStyle","fillColor","fillOpacity","weight","dashArray","changeCountryColor","e","target","setStyle","onEachCountry","feature","layer","countryName","properties","ADMIN","bindPopup","options","Math","random","on","click","mouseover","colorChange","setState","value","this","style","width","textAlign","MapContainer","height","zoom","center","scrollWheelZoom","attributionControl","GeoJSON","data","mapData","features","onEachFeature","type","onChange","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"w4i4oBA6EeA,E,4MAtEdC,MAAQ,CAAEC,MAAO,W,EAEjBA,MAAQ,CAAC,QAAS,OAAQ,SAAU,SAAU,Q,EAM9CC,aAAe,CACdC,UAAW,MACXC,YAAa,EACbH,MAAO,QACPI,OAAQ,EACRC,UAAW,G,EAGZC,mBAAqB,SAAAC,GACpBA,EAAEC,OAAOC,SAAS,CACjBT,MAAO,QACPE,UAAW,EAAKH,MAAMC,MACtBG,YAAa,M,EAIfO,cAAgB,SAACC,EAASC,GACzB,IAAMC,EAAcF,EAAQG,WAAWC,MAEvCH,EAAMI,UAAN,UAAmBH,EAAnB,QAEAD,EAAMK,QAAQd,YAAce,KAAKC,UAAY,GAI7CP,EAAMQ,GAAG,CACRC,MAAO,EAAKf,mBACZgB,UAAW,SAAAf,Q,EAMbgB,YAAc,SAAAhB,GACb,EAAKiB,SAAS,CAACxB,MAAOO,EAAEC,OAAOiB,S,uDAtChC,c,oBAyCA,WACC,IAAMzB,EAAQ0B,KAAK3B,MAAMC,MAEzB,OACC,sBAAK2B,MAAO,CAACC,MAAO,SAApB,UACC,oBAAID,MAAO,CAACE,UAAW,UAAvB,oBACA,cAACC,EAAA,EAAD,CACCH,MAAO,CAACI,OAAQ,QAChBC,KAAM,EACNC,OAAQ,CAAC,GAAI,KACbC,iBAAiB,EACjBC,oBAAoB,EALrB,SAOC,cAACC,EAAA,EAAD,CACCC,KAAMC,EAAQC,SACdZ,MAAOD,KAAKzB,aACZuC,cAAed,KAAKhB,kBAGtB,uBAAO+B,KAAK,QAAQhB,MAAOzB,EAAO0C,SAAUhB,KAAKH,qB,GAjEjCoB,aCELC,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f317244.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {GeoJSON, MapContainer} from 'react-leaflet';\r\nimport mapData from '../data/countries.json';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './MyMap.css';\r\n\r\nclass MyMap extends Component {\r\n\tstate = { color: \"#ffffff\"};\r\n\r\n\tcolor = ['green', 'blue', 'yellow', 'orange', 'gray'];\r\n\r\n\tcomponentDidMount() {\r\n\t\t// console.log(mapData);\r\n\t}\r\n\r\n\tcountryStyle = {\r\n\t\tfillColor: 'red',\r\n\t\tfillOpacity: 1,\r\n\t\tcolor: 'black',\r\n\t\tweight: 2,\r\n\t\tdashArray: 2,\r\n\t};\r\n\r\n\tchangeCountryColor = e => {\r\n\t\te.target.setStyle({\r\n\t\t\tcolor: 'green',\r\n\t\t\tfillColor: this.state.color,\r\n\t\t\tfillOpacity: .8,\r\n\t\t});\r\n\t}\r\n\r\n\tonEachCountry = (feature, layer) => {\r\n\t\tconst countryName = feature.properties.ADMIN;\r\n\t\t// console.log(countryName)\r\n\t\tlayer.bindPopup(`${countryName} ^^`);\r\n\r\n\t\tlayer.options.fillOpacity = Math.random() || .1;\r\n\t\t// const colorIndex = Math.floor(Math.random() * this.color.length);\r\n\t\t// layer.options.fillColor = this.color[colorIndex];\r\n\r\n\t\tlayer.on({\r\n\t\t\tclick: this.changeCountryColor,\r\n\t\t\tmouseover: e => {\r\n\t\t\t\t// console.log(e.target.feature.properties.ISO_A3);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tcolorChange = e => {\r\n\t\tthis.setState({color: e.target.value});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst color = this.state.color;\r\n\r\n\t\treturn (\r\n\t\t\t<div style={{width: '100vh'}}>\r\n\t\t\t\t<h1 style={{textAlign: 'center'}}>My Map</h1>\r\n\t\t\t\t<MapContainer\r\n\t\t\t\t\tstyle={{height: \"80vh\"}}\r\n\t\t\t\t\tzoom={2}\r\n\t\t\t\t\tcenter={[20, 100]}\r\n\t\t\t\t\tscrollWheelZoom={true}\r\n\t\t\t\t\tattributionControl={false}\r\n\t\t\t\t>\r\n\t\t\t\t\t<GeoJSON\r\n\t\t\t\t\t\tdata={mapData.features}\r\n\t\t\t\t\t\tstyle={this.countryStyle}\r\n\t\t\t\t\t\tonEachFeature={this.onEachCountry}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</MapContainer>\r\n\t\t\t\t<input type=\"color\" value={color} onChange={this.colorChange}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MyMap;","import MyMap from \"./components/MyMap\";\n\nfunction App() {\n  return (\n    <MyMap />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}